/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:02:52 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("off?eFtNPgX-.I9#_J3795[_]lU.=/Tss7c(9YO6xlz", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("false\"q@LeyLdfs!Iy t)oTd9{4T-t0FFgexRlO/<hq':Y=52", false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("yess^N*", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("ong>x N~-o\"Ek4S9)jc %krX/W9@0FwE&Zr]l%85*j>WLd//w[b", false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("true", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool("&5$@cs5BDo?`{:g'e?V%Loa&/ETLa+_Av%", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("The String did not match any specified value");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("trueoffse");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1kps}eP-4LNDch6Z4y]#Zm%{JC3.F=)Obc79uJHL:%%f;wR");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.parseBoolean("/:;.,%#");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("/:;.,%#", true);
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS("", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitWS("}KRLa|mn`zg_FbiUaGS$9_^\tc;~hs\"1D<<AGDmr", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitWS(":&  OpL@%*:\bN#w\"a;9G|o~J`ar^l5r9b@6\"<", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Subject.StrUtils.splitFileNames(stringArray0[1]);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject.StrUtils.splitFileNames("comp5111.assignment.cut.Subject$Check");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject.StrUtils.splitSmart("'4h", '4', true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart("\"~LP,_\"aJ6^ iW*7PZ([cnqe9", ' ', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("", '.', true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.StrUtils.splitSmart("8sA#!O&*:%%bxh&_D-cv;Ubttg~ Src9.]wl&`z9X.]#`6", 'C', false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject.StrUtils.split(",^#bbZDB08e+|", '\\');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject.StrUtils.split("X", 'b');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(9, 34, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(45, 227, (int[]) null, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[3];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(1, 4, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(subject_PrimUtils_IntComparator0).lessThan(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(1, 4, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      Subject.PrimUtils.sort(289, 289, intArray0, subject_PrimUtils_IntComparator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 6, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-3025), 13, (-3025), (-5486), 2773).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-915), 1399, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(18, (-406), 893, 1378, 2).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-406), 1, (Subject.Progressable) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("\"8amb=m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"8amb=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("mXxkp-sW/n,S(Rv}*cLT~'z%AC<>e*+&c(z|?r}k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mXxkp-sW/n,S(Rv}*cLT~'z%AC<>e*+&c(z|?r}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("~G|M hP7+^1ZUH&=yGPe]guGM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~G|M hP7+^1ZUH&=yGPe]guG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("g>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("q%Y=T}8{PDzkXF8<Z!rmA.~chonZwUGrhtK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q%Y=T}8{PDzkXF8<Z!rmA.~chonZwUGrht\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = Subject.StringUtils.join("", (List<?>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl");
      assertEquals("Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+0UfgphXfywl,Rpl/{-KQ5_7)zy/Kn\"DV'hdgc:]gB(+...", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("", "(Rd[VQP{v4\"F.N_+IT1)gC0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("regex", "regex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, "XaSCK%Co]sYGa/W=mSa.,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = Subject.StringUtils.join(stringArray0, "?hat[!Pc*nK-<8?Bb");
      assertEquals("null?hat[!Pc*nK-<8?Bbnull", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "]o%!.~C9:DK xHtyJo-Gx(e(!sDna#HQ\"~MRc0([[Z2{My'=+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("6EGM6v%f?t+R9<Z", "6EGM6v%f?t+R9<Z", "6EGM6v%f?t+R9<Z", 1399);
      assertEquals("6EGM6v%f?t+R9<Z", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("rV['", "rV['", "rV['");
      assertEquals("rV['", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("one$8l?JVgOY,2|?dwo1DdhSfPX4P7zuVi]FD4h", "one$8l?JVgOY,2|?dwo1DdhSfPX4P7zuVi]FD4h", "Mx9", 2);
      assertEquals("Mx9", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("2sYxGKHRc 'Y*bZo,l|(HFVsU_1-|rH{4<~fQV{Q7Jt", "S2B8P)0~:]As=4- Ji*'jQ9HnX01l1}", "S2B8P)0~:]As=4- Ji*'jQ9HnX01l1}", 0);
      assertEquals("2sYxGKHRc 'Y*bZo,l|(HFVsU_1-|rH{4<~fQV{Q7Jt", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("UQCK9>r#aw2z8(;D0t-|+tw 4pqE`f\u0002", "n", (String) null, (-1));
      assertEquals("UQCK9>r#aw2z8(;D0t-|+tw 4pqE`f\u0002", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("V%ePc[Mxc7{PrIk*?!$", "", "", (-1));
      assertEquals("V%ePc[Mxc7{PrIk*?!$", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("", "", "=K7Ii1oA@m8w+:A~PE", 59);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("true/:;.,%#", "L/$xd'7dveZq&VHvT1&");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("d1>T'1&#cg,+^^gx@oz.5hB#f", "...");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("o", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("B)TdB", "'Vb]LI4g?zy]1N&@N)st#MVo&=,[V!ZjQe@Nl%");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("7V", "\"QV$@u{J?");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("t", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("/:;.,%#", 1399, true);
      String[] stringArray0 = Subject.StringUtils.split(string0, "/:;.,%#");
      String string1 = Subject.StringUtils.join(stringArray0, "^*kVH~,W0u(0TX#)dH )KQ>#:cVp");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("HP!evy<q3wMLjFU{H_l%o@zw5D", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", " .");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("b2lK1U|*ST]t`Fb:@d$.#]Y^_FPkNy=)ro&*rJ_", "true\"q@LeyLdfs!Iy t)oTd9{4T-t0FFgexRlO/<hq':Y=52");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("s:d0N [wjU&", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("Jg-0s=", ";`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("&/OetPV%$X\"}~C", "OU4I:CCuiF~m8aEkksI:?{Ai2pPF@!Z1g;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("0D3bN)`|Rk%Jh9w-tV(j8JkB*HcV_7'YZ9'*F^q#KGG(=J,", "}JgNf*k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, "off");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      String string0 = Subject.StringUtils.trimEnd("hJO|@", charArray0);
      assertEquals("hJO|", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimEnd("yCoM%X$,rgmb) 2pR)fIaw<t", charArray0);
      assertEquals("yCoM%X$,rgmb) 2pR)fIaw<t", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("no", 'o');
      assertEquals("n", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("*5WtY%h34t$dC)sW0gp(@9", '7');
      assertEquals("*5WtY%h34t$dC)sW0gp(@9", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", '-');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("iYzd:7B4iW|f Bq*JWiP[nd~>q^f :(.0qcD@zq].B");
      assertEquals("iYzd:7B4iW|f Bq*JWiP[nd~>q^f :(.0qcD@zq].B", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("\t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'A';
      String string0 = Subject.StringUtils.trimBegin("AccountKey=", charArray0);
      assertEquals("ccountKey=", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimBegin("&lt;", charArray0);
      assertEquals("&lt;", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("?hat[!Pc*nK-<8?Bb", 'l');
      assertEquals("?hat[!Pc*nK-<8?Bb", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("2222222222222222222222222222222222222222222222222222222222222222222222222222222222", '2');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("    ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("+r2.(*jt4np&SP]W&8jUPn0.UY71Lg)jt-{X,qR.,Vw>BU20R");
      assertEquals("+r2.(*jt4np&SP]W&8jUPn0.UY71Lg)jt-{X,qR.,Vw>BU20R", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&KN");
      assertEquals("KN", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("hy`y~ZL=7[|TO&(M(7z6^Fb`yV]#hH<~WMCLcc>&|D$gK;7");
      assertEquals("hy`y~ZL=7[|TO(M(7z6^Fb`yV]#hH<~WMCLcc>|D$gK;7", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&&Y,t~ ylMvg|0-0:hNVmIef#M`(gS.J");
      assertEquals("&Y,t~ ylMvg|0-0:hNVmIef#M`(gS.J", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("2V6>!m-vE{{[3C]ZIC]cxm(~by% 1mNwg 9k'aW3R=]ux0At&");
      assertEquals("2V6>!m-vE{{[3C]ZIC]cxm(~by% 1mNwg 9k'aW3R=]ux0At&", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("Lz^sK*yAnH*B7n]jeqW-md<WzD_b<M!VTdCgHu#?M-w]&?");
      assertEquals("Lz^sK*yAnH*B7n]jeqW-md<WzD_b<M!VTdCgHu#?M-w]?", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("s");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("~c.;{'P]0fRsxwJ TCLa1GPEWOys6[vR\"K&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("...");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("&&&6r%uM G?I ZX");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer((-3041));
      String string0 = Subject.StringUtils.truncateString("comp5111.assignment.cut.Subject$BooleanUtils", (int) integer0);
      assertEquals("omp5111.a...", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, 1399);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("", 389);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "on");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // on
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Subject.Check.isTrue(true, "on");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "offbC]O7Ad3a? M)\"=V$ZN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offbC]O7Ad3a? M)\"=V$ZN must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Subject.Check.notNullOrEmpty(objectArray0, "59!Cx)f`yzPA[rX8naBMezw#f`A?$RehTQ!0IA");
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject.Check.notNullOrEmpty("Mm", "Mm");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "e$8l?JVgOY,2|?dwo1DdhSfPX4P7zuVi]FD4h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e$8l?JVgOY,2|?dwo1DdhSfPX4P7zuVi]FD4h must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Subject.Check.notEmpty("io^7cVU0o@>x^r8{\"}%H<|=Ta A", "yCoM%X$,rgmb) 2pR)fIaw<t");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Subject.Check.notEmpty((String) null, "no");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimEnd((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(34);
      String string0 = Subject.BooleanUtils.toString(boolean0, "zb~|*&6] (/byY[bjQez+'FHw", "    ", "zb~|*&6] (/byY[bjQez+'FHw");
      assertEquals("zb~|*&6] (/byY[bjQez+'FHw", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "V%", "V%", "X0C{B6 Wr{xXb1VBz(_bWBk'z-%UkiA0}B:h");
      assertEquals("X0C{B6 Wr{xXb1VBz(_bWBk'z-%UkiA0}B:h", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = Subject.BooleanUtils.toString(boolean0, "Y[ogonD2vIg[I4}@`;X~@", "4-w", "false");
      assertEquals("4-w", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-583));
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      int int0 = Subject.BooleanUtils.toInteger(boolean1, (-2882), 0, (-583));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 11, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("?hat[!Pc*nK-<8?Bb", "?hat[!Pc*nK-<8?Bb", "B#3>4C", "B#3>4C");
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 11, 0, 0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, 0, 1387);
      assertEquals(1387, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("$o$ZS\"MxY:YzYc{XiKa%ze_H", "&$o$ZS\"MxY:YzYc{XiKa%ze_H", "&$o$ZS\"MxY:YzYc{XiKa%ze_H", "$o$ZS\"MxY:YzYc{XiKa%ze_H");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("kWiwOiqP>lqO$$c", "kWiwOi&qP>lqO$$c", (String) null, "kWiwOi&qP>lqO$$c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("*-xYYk7dSwr9Z 3Rcw)1[\"_yFVh*v#.B@\"yn6Dho|", "N4A", "*-xYYk7dSwr9Z 3Rcw)1[\"_yFVh*v#.B@\"yn6Dho|", "*-xYYk7dSwr9Z 3Rcw)1[\"_yFVh*v#.B@\"yn6Dho|");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "Twd%'c", "Twd%'c", "Twd%'c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "\"+>v045\"\"", (String) null, "no");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "A#,?1bp2nXZHI5sW-,8_Jh", "A#,?1bp2nXZHI5sW-,8_Jh", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("GkP<");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("T (d");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("ofk");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("oni");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yev");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("YbD");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("nL");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("N\"");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("of");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("0");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("F");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("N");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("n");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("1");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("fTlsH");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Oz");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("s");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      Integer integer1 = new Integer(3252);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, (Integer) null, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Integer integer1 = new Integer(1015);
      Integer integer2 = new Integer(32);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer2, integer2);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer(64);
      Integer integer1 = new Integer(6);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer integer0 = new Integer((-2210));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(46);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 4117);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer((-2312));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, (Integer) null, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 4117);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((-231), (-187), (-187), 3076);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1425, 3795, 1425, 3795);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((int) 'D', 1, 1, 68);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("/zXS.K+R:zd[<c%DsK:f9&o>TNnjoiPsW=+N '`Zy=", "biEH{EO)f7r^k5", "biEH{EO)f7r^k5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("ofk", "", "ofk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("DGSQ1Ewn%<a^`{,3EqXtFt\"xu*", "Gw4Q}m10F)Orthqs7mB?DU", "DGSQ1Ewn%<a^`{,3EqXtFt\"xu*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("yes", "yes", ".Gbd`xYO@m!ynlNi$)|YkZ2cm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer integer0 = new Integer(1117);
      Integer integer1 = new Integer(79);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer1, integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Integer integer0 = new Integer(1117);
      Integer integer1 = new Integer(79);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(integer1, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer((-2210));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = new Integer(92);
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Integer integer0 = new Integer((-2210));
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(0, 1399, 1399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(120, 435, 120);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(69);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((int) 'D');
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(865, 865, 865, 865);
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer integer0 = new Integer(1399);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      boolean boolean2 = Subject.BooleanUtils.isNotFalse(boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Subject subject0 = new Subject();
      Boolean boolean0 = Boolean.FALSE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "lc} REWT(OmK^pqCYl3yn2cgs|SneqI4;(0<'\"g'_{#";
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) subject0;
      List<Object> list0 = List.of(objectArray0);
      String string0 = Subject.StringUtils.join("DSn#+mE%qTUb,SV=N:%B4y\"4Oe<Vh6", list0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("]u6'F,2hye7Ap.-t`MD", '|');
      assertTrue(list0.contains("]u6'F,2hye7Ap.-t`MD"));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("ofk", "ofk", "ofk");
      assertEquals("ofk", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("/:;.,%#", 1399, true);
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("/:;.,%#", "/:;.,%#");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase("\"56Fz%", "\"56Fz%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      assertEquals(120, Subject.StringUtils.MAX_COMMENT_DISPLAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("?hat[!Pc*nK-<8?Bb");
      assertEquals("?hat[!Pc*nK-&lt;8?Bb", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad((Number) (-1), (-1391), '_');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1391
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("yes");
      assertEquals("yes", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotFalse((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      subject_HeapSort0.sort((Subject.IndexedSortable) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:47:29 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("falsex", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("ong/ejB#;]j1Tq9<F]%zVAJh=O_1^MJY~Q", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("true", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("LJ<m7Q_\"^P<6lSYu|lpTp[#`Y/C", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBoolean("The Integer did not match any specified value");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBoolean("true");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1AHJ%n:]i%5)!I@NjYMx0+jqh]bEbd7E.p3u?+}4__oiT\"xN'4UietLbX");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("&amp;");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("(!]`$2_oXooT3GA7Qy90045O", 3376, true);
      List<String> list0 = Subject.StrUtils.split(string0, '`');
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.splitWS("", false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Subject.StrUtils.splitWS("&J)@ljWc`[f|Fo.6/n,AFZeaIb]:h;@dlZ!C-JPJ!Ly;ga", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS(" 1AHJ%n:]i%5)!I@NjYMx0+jqh]bEbd7E.p3u?+}4__oiT\"xN'4UietLbX", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitFileNames("!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject.StrUtils.splitSmart("wzo,I)%?{m?VZ=B:2OeofD+,2cO.S%'PG?Imyh*7k4fg~kAt.", 'g', false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("", 'Z');
      Subject.StrUtils.splitSmart("!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", 'k', list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart("_6\"z||Xt&>H\"B3gu=VdT.%P~^CZ5;)jYI}_", 'v', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("", 'Z');
      Subject.StrUtils.splitSmart("\\(?=,)", 'k', list0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("", '9', true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.StrUtils.split(":Vc,LiSt!9v>t", '\u0000');
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(75, 95, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 75 out of bounds for length 1
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-2357), 77, (int[]) null, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[5];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 1, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 5
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[1];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      Subject.PrimUtils.sort((-838), (-932), intArray0, subject_PrimUtils_IntComparator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(34, 41, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 37 out of bounds for length 5
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1049), 3623, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-803), (-842), 1, (-1792)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, 1, 872);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("LJ<m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"LJ<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("nZ1&bWmb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nZ1&bWmb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("p`F:S*MSJ0 /zXYSN%", true);
      String string0 = Subject.StringUtils.join("E31:SEm,2)\"le[-|vZ<^_&bK,,kd,Y+SwXB'*{F", list0);
      assertEquals("p`F:S*MSJ0E31:SEm,2)\"le[-|vZ<^_&bK,,kd,Y+SwXB'*{F/zXYSN%", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("Must pass a delimiter.", "PnbZTL5ye/Zi>E^3cC'F9 !9'!h]AG>`iVK>j|`_/*@V*5^&+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("<", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("PnbZTL5ye/Zi>E^3cC'F9 !9'!h]AG>`iVK>j|`_/*@V*5^&+", "PnbZTL5ye/Zi>E^3cC'F9 !9'!h]AG>`iVK>j|`_/*@V*5^&+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = Subject.StringUtils.join(stringArray0, "+v.wZ7jF|O7h");
      assertEquals("null+v.wZ7jF|O7hnull+v.wZ7jF|O7hnull+v.wZ7jF|O7hnull", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.StringUtils.join(stringArray0, "`qd@yS!mY2B#Mqsdhe_G|'U=]*b ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("<", "Must pass a delimiter.");
      String string0 = Subject.StringUtils.join(stringArray0, "<");
      assertEquals("Must pass a delimiter.", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("D+E+^1tc~QV/B!", "D+E+^1tc~QV/B!", "D+E+^1tc~QV/B!", (-409));
      assertEquals("D+E+^1tc~QV/B!", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("o'NY<#&$wJ=O]d-Z39%p#C:!)#*.{^1 ny&BY", "o'NY<#&$wJ=O]d-Z39%p#C:!)#*.{^1 ny&BY", "searchString", 33);
      assertEquals("searchString", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("&J)@ljWc`[f|Fo.6/n,AFZeaIb]:h;@dlZ!C-JPJ!Ly;ga", "&J)@ljWc`[f|Fo.6/n,AFZeaIb]:h;@dlZ!C-JPJ!Ly;ga", "4vPSH=f1]nMP55++~FfY^lNtiA~fhZT;ADBwm/f|Jk(U GuNH3c6Hy!&", 297);
      assertEquals("4vPSH=f1]nMP55++~FfY^lNtiA~fhZT;ADBwm/f|Jk(U GuNH3c6Hy!&", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("comp5111.assignment.cut.Subject$PrimUtils$IntComparator", "}$+W)a>_fD{Ly}i{{z(jQ9^~h{#f~&=iBFy!(HZy=Br}[}QRz", "\"+.R!EJ`(/!^'v}Z", 0);
      assertEquals("comp5111.assignment.cut.Subject$PrimUtils$IntComparator", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("GZy^:c1.Lx&e(rn8(IAgHq$G]HMa@", "`\"wk3P] +}`XR+P% )(HaBuP4:3*/e(v:^d5kdf_fadjxvZ2^Mm3lMtM", (String) null, 968);
      assertEquals("GZy^:c1.Lx&e(rn8(IAgHq$G]HMa@", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("", "true", "true", 6);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("<", "Must pass a delimiter.");
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", "");
      assertEquals(54, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split(")+j MJ", ")+j MJ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("o", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("&amp;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("(!]`$2_oXooT3GA7Qy90045O", 3376, true);
      // Undeclared exception!
      try { 
        Subject.StringUtils.split(string0, "&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("}$+W)a>_fD{Ly}i{{z(jQ9^~h{#f~&=iBFy!(HZy=Br}[}QRz", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("$%-,%{7&q0ra)j7GG}PIS+-)", "!Sjq}[h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("5LqJ4J}a]lk7sZv\"~60|]+#Lh& >L/Z!LbT!", "r=0|9I}0$^%,S Ld4}em-N.<D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("I(E%'gg[ xHTp@(@TuYq^.&t4]t k2 }AqM", "I(E%'gg[ xHTp@(@TuYq^.&t4]t k2 }AqM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "`+*/F>0d;h,Z#60fHSZwcxcd!k-e_g\"%E@bH-22~G@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("=", "e4ksl|Q='?");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, "+0's7}j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "9k~%A\\uDOl8\"LF((VRRuzF6P";
      char[] charArray0 = new char[5];
      charArray0[2] = 'P';
      String string1 = Subject.StringUtils.trimEnd(string0, charArray0);
      assertEquals("9k~%A\\uDOl8\"LF((VRRuzF6", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "9k~%A\\uDOl8\"LF((VRRuzF6P";
      char[] charArray0 = new char[5];
      String string1 = Subject.StringUtils.trimEnd(string0, charArray0);
      assertEquals("9k~%A\\uDOl8\"LF((VRRuzF6P", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("truep<M~y:FE~lL!aZ", '6');
      assertEquals("truep<M~y:FE~lL!aZ", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", 'I');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = Subject.StringUtils.trimBegin("4vPSH=f1]nMP55++~FfY^lNtiA~fhZT;ADBwm/f|Jk(U GuNH3c6Hy!&", charArray0);
      assertEquals("4vPSH=f1]nMP55++~FfY^lNtiA~fhZT;ADBwm/f|Jk(U GuNH3c6Hy!&", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("u1l\"_p{3?maIjEyoo[bV8BW,CS9<dV(jMi", 'u');
      assertEquals("1l\"_p{3?maIjEyoo[bV8BW,CS9<dV(jMi", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", 'r');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin(" 1AHJ%n:]i%5)!I@NjYMx0+jqh]bEbd7E.p3u?+}4__oiT\"xN'4UietLbX");
      assertEquals("1AHJ%n:]i%5)!I@NjYMx0+jqh]bEbd7E.p3u?+}4__oiT\"xN'4UietLbX", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&J)@ljWc`[f|Fo.6/n,AFZeaIb]:h;@dlZ!C-JPJ!Ly;ga");
      assertEquals("J)@ljWc`[f|Fo.6/n,AFZeaIb]:h;@dlZ!C-JPJ!Ly;ga", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("l'KgMn/WS'vG?Azc6g!H^%&C}maW'U");
      assertEquals("l'KgMn/WS'vG?Azc6g!H^%C}maW'U", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("@w&");
      assertEquals("@w&", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("PnbZTL5ye/Zi>E^3cC'F9 !9'!h]AG>`iVK>j|`_/*@V*5^&+");
      assertEquals("PnbZTL5ye/Zi>E^3cC'F9 !9'!h]AG>`iVK>j|`_/*@V*5^+", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("Must pass a delimiter.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("+9RK]ccfq<hmh [#,iQ<ZWm`P](7&74GHK9");
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateStringjava.lang.Integer@0000000001", (-1));
      assertEquals("         ...", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("&amp;", 968);
      assertEquals("&amp;", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty(objectArray0, "'sr!wSzEG].+-_sM5:#'W0N@jA{[\"[l}uT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'sr!wSzEG].+-_sM5:#'W0N@jA{[\"[l}uT must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         //  must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Subject.Check.notNullOrEmpty(objectArray0, "I(%U*_~Oj}fX$eI^A<S]fv#\"{EC.;7C{(co0f~2");
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject.Check.notNullOrEmpty("Qc VO<0j\":EY3F(m8=_/U>=3MlKsq Ga,JlES", "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ] must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Subject.Check.notEmpty("@w&'w", "&lt;");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Subject.Check.notEmpty((String) null, "s8-|)PE7yt+j &^[dsj30IA74OO5k(lO0%)uC)v zJux|y");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.splitRemoveEmpties("o4$Bqu|m.^N)e6'8>:$Lw_Efv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // regex must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("hqC7NxRz-M;\"gufj`8L\"h]vQ.D,F)9V:=o_+-Jyf<k");
      String string0 = Subject.BooleanUtils.toString(boolean0, "$a622v-tbN9k,?TS#DT&K!g/_;Il68h,jku>9rheT?5|Yo! S[Q3#q{d", "J@~Eb.6TZqZVY6sJ", "3uSP#EkNR k1$Bw6IE3a[A[?o[@DLXQb vzSpt4k_7o5yn(,O-#a(vxd-");
      assertEquals("J@~Eb.6TZqZVY6sJ", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "D`c%jS^G", "D`c%jS^G", "D`c%jS^G");
      assertEquals("D`c%jS^G", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer((-1138));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      String string0 = Subject.BooleanUtils.toString(boolean0, "true@w&'w q) cXEkH=/Rq-5/(=~5cWqZc|)64hW4e", "La;", "");
      assertEquals("true@w&'w q) cXEkH=/Rq-5/(=~5cWqZc|)64hW4e", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, (-4945), (-4945), 2136);
      assertEquals(2136, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 65, (-2364), 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, (-3932), (-3932));
      assertEquals((-3932), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, (-309), (-523));
      assertEquals((-523), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", "`", "`", "P6X<=Uu+Ct2bOrzs2.;tl 74uP_.6w!4#=XE`QRk9TGqbTr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("`", "b~ %8LZmeB /M~bk3q&D6gor[BDyME", "b~ %8LZmeB /M~bk3q&D6gor[BDyME", "`");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("", " 1AHJ%n:]i%5)!I@NjYMx0+jqh]bEbd7E.p3u?+}4__oiT\"xN'4UietLbX", "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "_kYbi9EoKPLyfL_.NZL$0w9<(DQA*+kJW@X3[`", "_kYbi9EoKPLyfL_.NZL$0w9<(DQA*+kJW@X3[`", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "$", "", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", (String) null, "!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("&amp;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("&lt;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("&l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("=");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = Subject.BooleanUtils.toBoolean(stringArray0[7]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("o'NY<#&$wJ=O]d-Z39%p#C:!)#*.{^1 ny&BY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer((-387024648));
      Integer integer1 = new Integer((-2832));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer((-549));
      Integer integer1 = new Integer(107);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer((-3307));
      Integer integer1 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer1);
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 0, 1, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(3376);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = Integer.getInteger("}xGK,oO# ");
      Integer integer1 = new Integer(3376);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = Integer.getInteger("}xGK,oO# ");
      Integer integer1 = new Integer(3376);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer1, integer0, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer((-3307));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, (-220), 89, 1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0, (-1), 0, 2367);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(59, 59, 59, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((-635), 0, 0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, (Integer) null, (Integer) null, integer0);
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "comp5111.assignment.cut.Subject$Check", ".-K7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("&amp;", "", "&amp;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", "!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX", "!1fT<r2TIPS?YWTls8?2!qNGe=5mTj=_Hnr464U%+Cp'RK%1?=PWmX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("88}r6)MIfq`;l:%$9/DE7;JiaF)L,", "U&/xH|W%N=Bqql.uby<@1\"_Z", "Qc VO<0j\":EY3F(m8=_/U>=3MlKsq Ga,JlES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("@w&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer((-1898));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(integer0, (Integer) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer(530);
      Integer integer1 = new Integer(0);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-409));
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(530);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(5, 3, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(378, 378, 378);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0, (-408), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((-164565701));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("", "", "", "");
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(3376);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(3376);
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertNotNull(boolean1);
      
      boolean boolean2 = Subject.BooleanUtils.isNotFalse(boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("5wuc$olq{;P0v#\"_:ROL7jK`bKmSrlX2 VS", (String) null, "");
      assertEquals("5wuc$olq{;P0v#\"_:ROL7jK`bKmSrlX2 VS", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("(!]`$2_oXooT3GA7Qy90045O", 3376, true);
      String string1 = Subject.StringUtils.trimEnd(string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase(">n>X1Z>^[#4?#{%", "UTF-8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      assertEquals(120, Subject.StringUtils.MAX_COMMENT_DISPLAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("*q23[new=!a+eM`~cufoa4'6>_c5aZ,f1Y%");
      assertEquals("*q23[new=!a+eM`~cufoa4'6>_c5aZ,f1Y%", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Subject.StringUtils.pad((Number) (-1), 681, '@');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("p`F:S*MSJ0 /zXYSN%");
      assertEquals("p`F:S*MSJ0 /zXYSN%", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Subject.Check.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}

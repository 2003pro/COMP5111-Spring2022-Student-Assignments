/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:51:30 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest  {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("no", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("offRVss", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("falsecandidates", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("yescandidates", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("on", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool("truedy9>JHC!jC$pMb@BjFSEDx/v?R/d}#?\"vX", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBool((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("N%r[!N?}}gw;G!,P}L(^Rv=j[s7)|c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = Subject.StrUtils.parseBoolean("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
      List<String> list1 = Subject.StrUtils.toLower(list0);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("=5DIl\"V'pR1[*+U(o5X{&5%UXibgu(~9G9R+]Z0u_9`J>p", true);
      assertTrue(list0.contains("=5DIl\"V'pR1[*+U(o5X{&5%UXibgu(~9G9R+]Z0u_9`J>p"));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS("lSSk=B`OV2]giTd ^S|\"NvZjSne~YZ@Ahy<}$h", true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitWS(" ", false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitFileNames((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("7u[yPwod~/O'M8Y}m;g#N{.v8TCo", 'H');
      assertTrue(list0.contains("7u[yPwod~/O'M8Y}m;g#N{.v8TCo"));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("", 'o', true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K", '$', false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("#", 't');
      assertEquals(1, list0.size());
      assertFalse(list0.contains("#"));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K", '+');
      assertTrue(list0.contains("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K"));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(1024, 3352, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1024 out of bounds for length 2
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.PrimUtils.sort((-1677), (-337618394), (int[]) null, (Subject.PrimUtils.IntComparator) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[0];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 2, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[4];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(89, 97, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 89 out of bounds for length 4
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-4365), 55, (-1), 1098, 1098).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-717), 1098);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, 69, 102, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("{%|Z6V2jk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{%|Z6V2j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("no");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"no\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("^ d-h]1JK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^ d-h]1J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("A!`Fr!G/}:^A|.$73r79sEE<6|vJ3x%Bvb`+}sf-", '/');
      String string0 = Subject.StringUtils.join("onc-ndidates", list0);
      assertEquals("A!`Fr!Gonc-ndidates}:^A|.$73r79sEE<6|vJ3x%Bvb`+}sf-", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "v]$=$'I;&B~r(`cz^\"lUrce_z A/5Z,!Xci\\uXQYm,l";
      List<String> list0 = Subject.StrUtils.splitSmart(string0, '`');
      String string1 = Subject.StringUtils.join("&}?3G\"|Q:iM`}~o", list0);
      assertEquals("v]$=$'I;&B~r(`cz^\"lUrce_z A/5Z,!Xci\\uXQYm,l", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(98);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      
      String string0 = Subject.BooleanUtils.toString(boolean0, (String) null, (String) null, "ud>_K|(");
      boolean boolean1 = Subject.StringUtils.startsWithIgnoreCase("D1h4@*d|:`;mc5>%pe.w1RGR%f^m9;k", string0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("n", "pHpED|XUp$gdeLQjZfu-Glq:^[2o:S[]9:JHq:<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, "argument
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = Subject.StringUtils.join(stringArray0, "{%|Z6V2jk");
      assertEquals("null{%|Z6V2jknull{%|Z6V2jknull", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yescandidates", "yes");
      String string0 = Subject.StringUtils.join(stringArray0, "yescandidates");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("yQQOT.v3drRV#s!Lm.$'-~LcT9EGF'XL(_v6G", "yQQOT.v3drRV#s!Lm.$'-~LcT9EGF'XL(_v6G", "yQQOT.v3drRV#s!Lm.$'-~LcT9EGF'XL(_v6G", (-2854));
      assertEquals("yQQOT.v3drRV#s!Lm.$'-~LcT9EGF'XL(_v6G", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("uRman\bOv+z^#*@>&=z'b}BA?", "uRman\bOv+z^#*@>&=z'b}BA?", "", 110);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("-nt 1DaL", "-nt 1DaL", "LXwX8F*/4,)n7&", 0);
      assertEquals("-nt 1DaL", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("?zc5LMmX5X_:EH.>p'eHsH77L53\"< k3%oaWEZ\"WG>*", "mckW|z4''GZp~:0vob^1AvX", (String) null, (-717));
      assertEquals("?zc5LMmX5X_:EH.>p'eHsH77L53\"< k3%oaWEZ\"WG>*", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("", "", "yQQOT.v3drRV#s!Lm.$'-~LcT9EGF'XL(_v6G", 306);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("v#`FE", (String) null, "v#`FE", (-1));
      assertEquals("v#`FE", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{%|Z6V2jk";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "{%|Z6V2jk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("~Hu1=zoPUp3jzc1vF_?G9", "v#`|FE");
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("4}Q%%|f", "4}Q%%|f");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties(",|#naS0QK1_UO*w(B7W8=[o2)]z", " ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("W+#", "'L3NX`+Um*ovMD@L4JvI*:}\"]!ZydOS85P\b'L'slf");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("R!}s", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("argument", "\"__ep6Y'9r9V}g");
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yescandidates", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", "'14%W");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("Tc]?,", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "yescandidates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("zdgITzxcv|6]V\r,pY[viAti#k!fU;I_/MQrcCQ&?5<-e", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("\"", "N%r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("on)L3NX`+Um*ovMD@L4JvI*:}\"]!ZydOS85P\b'L'slf", "X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "iG8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, "Dj7nb8b\"d`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = ')';
      String string0 = Subject.StringUtils.trimEnd("\\(?=,)", charArray0);
      assertEquals("\\(?=,", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = Subject.StringUtils.trimEnd("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", charArray0);
      assertEquals("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("N%r[!N?}}gw;G!,P}L(^Rv=j[s7)|c", '|');
      assertEquals("N%r[!N?}}gw;G!,P}L(^Rv=j[s7)|c", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("N", 'N');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("%r[!N?}}g...");
      assertEquals("%r[!N?}}g...", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimBegin(":j%b2t>vL U:CJ^&yZcfI%mc", charArray0);
      assertEquals(":j%b2t>vL U:CJ^&yZcfI%mc", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = Subject.StringUtils.trimBegin("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", ':');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("true", 't');
      assertEquals("rue", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("K\u0007 x@kJ:j7Pd)vO-Az:|~M)}.R{ cNNSg@2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|");
      assertEquals("lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("7R&3y50&6M)t!z=rYP");
      assertEquals("7R3y506M)t!z=rYP", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("lT8s}mwZ5(9;@3@&R");
      assertEquals("lT8s}mwZ5(9;@3@R", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("i$xA#7+(We>&<Kzs59A$");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("C", 119);
      assertEquals("C", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, (-4160));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", (-717));
      assertEquals("%r[!N?}}g...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Subject.StrUtils.parseBool(string0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, ")k@z4apmaC{e/$H3QcrYD9 ,7OI<B@i#xGiVpJt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // )k@z4apmaC{e/$H3QcrYD9 ,7OI<B@i#xGiVpJt
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("W", "W");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, "falseLi{_SNHRu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // falseLi{_SNHRu must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Subject.Check.notNullOrEmpty(objectArray0, "Z)}uh GZkz");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Subject.Check.notNullOrEmpty("$fEk=jbI{h=ITB", "$fEk=jbI{h=ITB");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "#";
      Subject.Check.notEmpty(string0, string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Subject.Check.notEmpty((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.splitRemoveEmpties((String) null, "\",D7~wdX<ad++X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // stringToSplit must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "a@K?8~t*B+", "-,[,] or & are not allowed in-conjunction with other delimiters ", "r=V B+1UPsX{(~+@#");
      assertEquals("r=V B+1UPsX{(~+@#", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 3, 3, (-711));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 1501, 110, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "x(EJ4%hk9/&?FNH:hk2\\u6FIb#";
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 16, (-3765), 2179);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 2669, 109);
      assertEquals(2669, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, (-1470), 202);
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("}{~%GRk%~7ORw^gX0%O^Afl#BL+GuF{m*eELfS|R:i}hD", "lT8s}mwZ5(9;@3@&R", "lT8s}mwZ5(9;@3@&R", "lT8s}mwZ5(9;@3@&R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Q-6Xf!A+3", "", "Q-6Xf!A+3", "The Integer did not match any specified value");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "Q}<(ti~h4s7c7", "!`<-)XWzH[B7a9xEhw#hI/", "!`<-)XWzH[B7a9xEhw#hI/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, ",d=@dx", (String) null, (String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, "K3I81`>0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "UTF-8", "...", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "%r[!N?}}g...", "%r[!N?}}g...", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("on<");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("Hx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("{jX[~");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("RVss");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("Hx!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(" ");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(59);
      Integer integer1 = new Integer(220);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer1, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Integer integer1 = new Integer(45);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(110);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer(2460);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(1604);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, (Integer) null, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(1604);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(1061, 0, (-2835), 2077);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, 0, 0, 1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, 1, (-1279), (-4365));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      String string0 = Subject.BooleanUtils.toString(boolean0, "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters ", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("", "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "S[G@f4^O[{w28e;2VW{n{", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("XTzO@)s<Wu/V'j%cbHwTgW", "|j>f/A6b8/G4]jIV#p90=%vtHji*?efTIq@2OT?O%zpe|6qW", "XTzO@)s<Wu/V'j%cbHwTgW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "%r[!N?}}g...");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("9S>:0O(4O/Lh$\"roW[~dE%^uN<W|", "&5>n@O", "@|af=&L%l2HaJuLSG[z?LdBI+v@RU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("%r[!N?}}g...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(120);
      Integer integer1 = new Integer((-1190));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(integer0, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2637);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer1, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, (Integer) 0, (Integer) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(0);
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer(1604);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((-608), 0, (-893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(98, 98, 113);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(4841, 253, 4841);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(202);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(1604);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0, 117, 0, 0);
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("'k{eYZ'I", '+');
      assertTrue(list0.contains("'k{eYZ'I"));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters ", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("vs%OB{)>\"R:&jPA[9|{9!{im&OLHcX9J&7}oT:]733", 3, true);
      assertEquals("vs%", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("The Integer did not match either specified value", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase("7PS8t6w}$uG/WO0;hJu]QJuxI~nY0d", "MGxSwDYV}g46$;(+<}zd<tW~Mipup-9D&?et1~D[r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      assertEquals(120, Subject.StringUtils.MAX_COMMENT_DISPLAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("The Integer did not match either specified value");
      assertEquals("The Integer did not match either specified value", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad((Number) integer0, (-601), '&');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -601
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("]EV:ZsK`gX5HLDl-9?YXD");
      assertEquals("]EV:ZsK`gX5HLDl-9?YXD", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotFalse((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Subject.Check.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}

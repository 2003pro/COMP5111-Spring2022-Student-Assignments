/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 12:59:32 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("offu", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("false", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("yes", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("on", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("true", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool("", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("T>MS_Z/qUM'U3G1)Ch(LYj%W\"");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("true");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Subject.StrUtils.parseBoolean("1VLf:ie");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.parseBoolean(")L3");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.parseBoolean("e");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("nlnXI:@K8*4f6`Qe2z`1p5oUVFaiaPwjOPT>s", 'n');
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitWS("", true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitWS("'L'slf", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitWS("The Integer did not match any specified value", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Subject.StrUtils.splitWS(" zJNT`Cu\"?'*Emr}", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject.StrUtils.splitFileNames("truexK4|?'IG+VS(Q~94R;<3=TC'fe^eS5*?#5b");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Subject.StrUtils.splitSmart("VWk!3E$G~^A2H%syW'H-8Xa6b3m`]OXM3cH^y/'Jf_", '^');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Subject.StrUtils.splitSmart("PR?\u0007Jx<\"Y+Nn(so5T23,?<dl", ',');
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart("truexK4|?'IG+VS(Q~94R;<3=TC'fe^eS5*?#5b", '?', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Subject.StrUtils.splitSmart("", 'o', true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject.StrUtils.splitSmart("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K", '$', false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Subject.StrUtils.split("#", 't');
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 8, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 1, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 2
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[2];
      Subject.PrimUtils.sort(1, 1, intArray0, (Subject.PrimUtils.IntComparator) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[4];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1), 76, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1810), 69, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-4365), 55, (-1), 1098, 1098).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-717), 1098);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-717), (-717), 66, (-717), (-717)).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      // Undeclared exception!
      subject_HeapSort0.sort(subject_IndexedSortable0, (-2350), (-717));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("Iv/aeYXmS`ZtzKvfsV$Tm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Iv/aeYXmS`ZtzKvfsV$T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("{%|Z6V2jk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{%|Z6V2j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("\"Lt5w)T7>\"(=|$TJ9&3i\"m`4_VM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"Lt5w)T7>\"(=|$TJ9&3i\"m`4_V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("mjuIj_su>B\"n$EOe)ZC8x)eo'tr v 1oq6@o};l^zD8]%@P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mjuIj_su>B\"n$EOe)ZC8x)eo'tr v 1oq6@o};l^zD8]%@P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("Jl0Cts^au~+bK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Jl0Cts^au~+b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("~RIK)b,NaN^#FwQXnA*0|N9UZ6T5DMz_qo3fF)V{$d0<7", 'n');
      String string0 = Subject.StringUtils.join("UTF-8", list0);
      assertEquals("~RIK)b,NaN^#FwQXUTF-8A*0|N9UZ6T5DMz_qo3fF)V{$d0<7", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("off", "off");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("I^#pV", "stringToSplit");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, "P7C2^j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("x", "x", ".BAu2L-DQ+_>Vg/~!v tOO-@POPEw");
      assertEquals(".BAu2L-DQ+_>Vg/~!v tOO-@POPEw", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("yes6QOTLv3drRV#s!Lm.$'-~LcT9EGF'XL(_l6G", "yes6QOTLv3drRV#s!Lm.$'-~LcT9EGF'XL(_l6G", "m)!R;PnkL2vgk[!n`pEe$nf$e6h`$i&ul", 1961);
      assertEquals("m)!R;PnkL2vgk[!n`pEe$nf$e6h`$i&ul", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("-nt 1DaL", "-nt 1DaL", "LXwX8F*/4,)n7&", 0);
      assertEquals("-nt 1DaL", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("G@ PeUaH_BOr>qJn{KE!#<J g{", "G@ PeUaH_BOr>qJn{KE!#<J g{", (String) null, 109);
      assertEquals("G@ PeUaH_BOr>qJn{KE!#<J g{", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("AgZ`%|&f6r@4W&rj5cZW=KFtCcul", "", "=:_PL+XY|w:h|Mv>=/f?3mxuX!", (-1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Subject.StringUtils.replace((String) null, "zdgITzxcv|6]V\r,pY[viAti#k!fU;I_/MQrcCQ&?5<-e", "(?<!\\),", 1932);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "Hx!";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "Hx!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("~Hu1=zoPUp3jzc1vF_?G9", "v#`|FE");
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("4}Q%%|f", "4}Q%%|f");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("", "");
      Subject.StringUtils.join(stringArray0, "null");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("Tc]?,", "Tc]?,");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("i,pM?h{Gt?lW.J=ZFsm~O6$P~9)7.A,", "'L3NX`+Um*ovMD@L4JvI*:}\"]!ZydOS85P\b'L'slf");
      String string0 = Subject.StringUtils.join(stringArray0, (String) null);
      assertEquals("L3NX`+Um*ovMD@L4JvI*:}\"]!ZydOS85P\bnullL'nullf", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("R!}s", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("no", "\"L'slf");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("y>r", "'ju");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("|7wC2^j", (String) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("&", "&");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("&#e!^XxufaDa~hofc4AAdu4oVh`", "&#e!^XxufaDa~hofc4AAdu4oVh`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("Ey}><(XAc3&Cz]7Xzw5W.}WZwGeVzaB6VDZJ", "Ey}><(XAc3&Cz]7Xzw5W.}WZwGeVzaB6VDZJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "uB~fm-:Wp!u_{-keq*F;@wnHl<Zr0{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("p)]1O-M|uKxO?tziM(B^;N>u1jM", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("1SbT~dNTS#2}b8{xsYW\"n<08awO<", "&amp;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("uc!>Kzxoa!?*)a^-PCc{Srbeq([D3U('G*m", "uc!>Kzxoa!?*)a^-PCc{Srbeq([D3U('G*m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '3';
      String string0 = Subject.StringUtils.trimEnd("Tb-1P6/6lB9I =dG~(f%fN`53", charArray0);
      assertEquals("Tb-1P6/6lB9I =dG~(f%fN`5", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = Subject.StringUtils.trimEnd("v#`|FE", charArray0);
      assertEquals("v#`|FE", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("on", 'q');
      assertEquals("on", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("N", 'N');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("BJ'E(t+]k|kIW^>{TMVejP:N8l'ff,");
      assertEquals("BJ'E(t+]k|kIW^>{TMVejP:N8l'ff,", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("\t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '.';
      String string0 = Subject.StringUtils.trimBegin(".bz~I5/h6>hq]%lKXy%Kr6s", charArray0);
      assertEquals("bz~I5/h6>hq]%lKXy%Kr6s", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = Subject.StringUtils.trimBegin(".bz~I5/h6>hq]%lKXy%Kr6s", charArray0);
      assertEquals(".bz~I5/h6>hq]%lKXy%Kr6s", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("true", 't');
      assertEquals("rue", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", 'N');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin(" Q   ");
      assertEquals("Q   ", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("'r");
      assertEquals("'r", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|");
      assertEquals("lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("1!'>[Q8r,LVRR&3u^O^Wro;g,Av5Zjydo 5-&0T");
      assertEquals("1!'>[Q8r,LVRR3u^O^Wro;g,Av5Zjydo 5-0T", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("fk$OCD,^A>RbWdy_^f&");
      assertEquals("fk$OCD,^A>RbWdy_^f&", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("yes/tF\"]&.");
      assertEquals("yes/tF\"].", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("rtF\"&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "x(EJ4%hk9/&?FNH:hk2\\u6FIb#";
      int int0 = Subject.StringUtils.getMnemonicIndex(string0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("", 166);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, (-26784207));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("VWk!3E$G~^A2H%syW'H-8Xa6b3m`]OXM3cH^y/'Jf_", (-26784207));
      assertEquals("Wk!3E$G~^...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, "PR?\u0007Jx<\"Y+Nn(so5T23,?<dl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PR?\u0007Jx<\"Y+Nn(so5T23,?<dl
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("on", "on");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \" must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Subject.Check.notNullOrEmpty(objectArray0, "PR?\u0007Jx<\"Y+Nn(so5T23,?<dl");
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Subject.Check.notNullOrEmpty(")k@z4apmaC{e/$H3QcrYD9 ,7OI<B@i#xGiVpJt", "03pm&*vr>fW>`RWcR4Ty|6NVC.zdmU8+[|<&>pn$!");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Subject.Check.notEmpty("0", "0");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Subject.Check.notEmpty((String) null, " G,;~WT+A]+CW|OnMfx'pmDGLDr");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimBegin((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(98);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      
      String string0 = Subject.BooleanUtils.toString(boolean0, (String) null, (String) null, "ud>_K|(");
      boolean boolean1 = Subject.StringUtils.startsWithIgnoreCase("D1h4@*d|:`;mc5>%pe.w1RGR%f^m9;k", string0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "candidates", "candidates", "&#e!^XxufaDa~hofc4AAdu4oVh`");
      assertEquals("&#e!^XxufaDa~hofc4AAdu4oVh`", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 1501, 110, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      int int0 = Subject.BooleanUtils.toInteger(boolean0, 306, (-3259), 306);
      assertEquals((-3259), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 2669, 109);
      assertEquals(2669, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, (-1470), 202);
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("Hx", "84ka5jh|8S%O?H4tzJPpf~JqD+UwTH&X4tj4h", (String) null, "&amp;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "\\?J+Ug'*~s\\uM<*4wY{O)9kF";
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(string0, "hLr", string0, "hLr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("PR?\u0007Jx<\"Y+Nn(so5T23,?<dl", "PR?\u0007Jx<\"Y+Nn(so5T23,?<dl", "PR?\u0007Jx<\"Y+Nn(so5T23,?<dl", "PR?\u0007Jx<\"Y+Nn(so5T23,?<dl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "Q}<(ti~h4s7c7", "!`<-)XWzH[B7a9xEhw#hI/", "!`<-)XWzH[B7a9xEhw#hI/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, ",d=@dx", (String) null, (String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, "K3I81`>0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "UTF-8", "...", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("l}s", "65{", "65{", "l}s");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("R!}s");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("of8");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("onu");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("yes");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("y>r");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("Hx");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("W");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("n");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(" zJNT`Cu\"?'*Emr}");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("I^#pV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = new Integer((-2455));
      Integer integer1 = new Integer((-1));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer1, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(1309);
      Integer integer1 = new Integer(11);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, (Integer) null, integer1, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer(1309);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, (Integer) null, integer0, integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer((-26784207));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-231970410));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-722));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = Integer.getInteger("P@hII*?c~N}^R!WBmuO6bo0");
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, 0, 0, 1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, (-929), 1, 1);
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-717), (-717), (-717), (-717));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(43, 1011, 1, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      String string0 = Subject.BooleanUtils.toString(boolean0, "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters ", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(200);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, true);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("", "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "no", "no");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("\"", "^yDD;\tEL[atoD#>N#u", "^yDD;\tEL[atoD#>N#u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("0", "0", "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("gmIZ$", "BJ'E(t+]k|kIW^>{TMVejP:N8l'ff,", "gmIZ$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) (-2610), (Integer) (-2607), (Integer) (-2590));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer((-504));
      Integer integer1 = new Integer((-2597));
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer1, integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Integer integer0 = new Integer(111);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(115);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(4841, 253, 4841);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((int) 'r', (int) 'r', (-717));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(50, 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertNotNull(boolean0);
      
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      int int0 = Subject.BooleanUtils.toInteger(boolean1, 1975, 4841, 4984);
      assertEquals(1975, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotTrue((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("(?<!\\),", 'g');
      assertTrue(list0.contains("(?<!\\),"));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("~Lk:$:7%jMJy[Grve[zQOcZhe+O{FvhvG.^a|`#b%df^F", "~Lk:$:7%jMJy[Grve[zQOcZhe+O{FvhvG.^a|`#b%df^F", "~Lk:$:7%jMJy[Grve[zQOcZhe+O{FvhvG.^a|`#b%df^F");
      assertEquals("~Lk:$:7%jMJy[Grve[zQOcZhe+O{FvhvG.^a|`#b%df^F", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad("comp5111.assignment.cut.Subject$Check", (-1), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("", 306);
      assertEquals("                                                                                                                                                                                                                                                                                                                  ", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase("7PS8t6w}$uG/WO0;hJu]QJuxI~nY0d", "MGxSwDYV}g46$;(+<}zd<tW~Mipup-9D&?et1~D[r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      assertEquals((-1), Subject.StringUtils.MNEMONIC_INDEX_NONE);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad((Number) integer0, (-601), '&');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -601
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("Hx");
      assertEquals("Hx", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.isNotFalse((Boolean) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Subject.Check.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}

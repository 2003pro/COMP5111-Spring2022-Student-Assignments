/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 18 13:09:24 GMT 2022
 */

package comp5111.assignment.cut;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import comp5111.assignment.cut.Subject;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Subject_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Subject.StrUtils.parseBool("no", false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Subject.StrUtils.parseBool("off{%|Z6V2jk", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Subject.StrUtils.parseBool("yes{%|Z6V2jk", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Subject.StrUtils.parseBool("on", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Subject.StrUtils.parseBool("trueHx!", true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Subject.StrUtils.parseBool("", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Subject.StrUtils.parseBool((String) null, false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Subject.StrUtils.parseBoolean("true-nt 1DaL");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Subject.StrUtils.parseBoolean("i}~twb~k0pyf");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Subject.StrUtils.parseBoolean("");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.split("nlnXI:@K8*4f6`Qe2z`1p5oUVFaiaPwjOPT>s", 'n');
      Subject.StrUtils.toLower(list0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Subject.StrUtils.splitWS("q66,n?/.PzscI]{Myo\"b3A<!<$|*H'9HBqWQjxYwD", false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Subject.StrUtils.splitWS("    ", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Subject.StrUtils.splitWS("zJ +/V]>x!", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Subject.StrUtils.splitFileNames((String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Subject.StrUtils.splitFileNames("A$ ;b-J$");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Subject.StrUtils.splitSmart("'|*H'9HBqWQjxYwD", '|', true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Subject.StrUtils.splitSmart(" <$|l4rGb`\";8bjY:('uQo]i*I~2zEX)q\"x=8m+", 'c', (List<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Subject.StrUtils.splitSmart("", 'o', true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Subject.StrUtils.splitSmart("yes6QOTLv3drRV#s!Lm.$'-~LcT9EGF'XL(_l6G", 'o', false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Subject.StrUtils.split("#", 't');
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[8];
      Subject.PrimUtils.IntComparator subject_PrimUtils_IntComparator0 = mock(Subject.PrimUtils.IntComparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort(47, 58, intArray0, subject_PrimUtils_IntComparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 47 out of bounds for length 8
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Subject.PrimUtils.sort(244, 244, (int[]) null, (Subject.PrimUtils.IntComparator) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        Subject.PrimUtils.sort((-1752), 308, intArray0, (Subject.PrimUtils.IntComparator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1752 out of bounds for length 6
         //
         verifyException("comp5111.assignment.cut.Subject$PrimUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      Subject.Progressable subject_Progressable0 = mock(Subject.Progressable.class, new ViolatedAssumptionAnswer());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-1810), 69, subject_Progressable0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("\u0000;{m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("{%|Z6V2jk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{%|Z6V2j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("f+,hH&=;2riQNTU3#NM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f+,hH&=;2riQNTU3#N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.toInt("K*;{!:Lc)PQho[7C-vkV$Cp.=0Mu=p(H(sag#y/?FM20c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K*;{!:Lc)PQho[7C-vkV$Cp.=0Mu=p(H(sag#y/?FM20c\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      List<String> list0 = Subject.StrUtils.splitSmart("~RIK)b,NaN^#FwQXnA*0|N9UZ6T5DMz_qo3fF)V{$d0<7", 'n');
      String string0 = Subject.StringUtils.join("UTF-8", list0);
      assertEquals("~RIK)b,NaN^#FwQXUTF-8A*0|N9UZ6T5DMz_qo3fF)V{$d0<7", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("n", "pHpED|XUp$gdeLQjZfu-Glq:^[2o:S[]9:JHq:<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.startsWithIgnoreCase((String) null, "argument
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = Subject.StringUtils.join(stringArray0, "");
      assertEquals("nullnullnullnullnullnullnullnullnull", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Subject.StringUtils.join(stringArray0, ":|+=s'6YOL%j:h!=L`0}j>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Subject.StringUtils.join((String[]) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ", "-,[,] or & are not allowed in-conjunction with other delimiters ");
      assertEquals("-,[,] or & are not allowed in-conjunction with other delimiters ", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("\t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("%%xS'yNL+3UQCsM~xUafC}ycP3gG}U|uXBQ}sW", "%%xS'yNL+3UQCsM~xUafC}ycP3gG}U|uXBQ}sW", "I^#p", 3047);
      assertEquals("I^#p", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("-nt 1DaL", "-nt 1DaL", "LXwX8F*/4,)n7&", 0);
      assertEquals("-nt 1DaL", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Subject.StringUtils.replace("&lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|", "{%|Z6", (String) null, 521);
      assertEquals("&lQC-_BqSnM`#<2VBd.N]%t`*Yvt qE')]}F[|", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce((String) null, "m", "]i");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{%|Z6V2jk";
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "{%|Z6V2jk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("I^#pVA4", "...");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("falsekPE3]E@@%;Rrq[0hfX`<Jh%x!C\"|", "");
      assertEquals(34, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("~Hu1=zoPUp3jzc1vF_?G9", "v#`|FE");
      boolean boolean0 = Subject.StringUtils.containsStringInsensitive(stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("&#77kv.zf", "\t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("Tc]?,", "Tc]?,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("L;2UK7Bu8tE:tB~`v`2DI~ [4ra&2K^z+aNJ)/qCH_5h", "L;2UK7Bu8tE:tB~`v`2DI~ [4ra&2K^z+aNJ)/qCH_5h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("dwt&-K4>?)E.#)Iiz}xMS(ts<v6vX>XIa~L(r[#vJ99", "\"%%xS'yNL+3UQCsM~xUafC}ycP3gG}U|uXBQ}sW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -,[,] or & are not allowed in-conjunction with other delimiters 
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("}Yf85K}vT=NeB]Sk~,$h\"DxcJV", "Os+<`%*mz;|^cyzg]\"_<|zLM'E*xi7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.split("yesI^#pVA4", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("", "W<h+hB)~EtAE(x=Rrz$pE|s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split("/6lLc):A$/EiiHPq%kY'@]\"]Ga6H)3L?E{7W|ctJ(Yh0SYW", "\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ' and \" are not allowed as delimiters
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.split((String) null, "+VE8%m::MI=4E;y9k68nLC@{R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must pass a delimiter.
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'D';
      String string0 = Subject.StringUtils.trimEnd("0Qs8K%XisK>b/EI]yZqjN3)Ga>R`e#32Y[2%T+,hP^VD", charArray0);
      assertEquals("0Qs8K%XisK>b/EI]yZqjN3)Ga>R`e#32Y[2%T+,hP^V", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimEnd("y#sMOA'X.,O2mu m36(wES~|@ZX7?CW'CpBK#Mu\"zD`LIf(", charArray0);
      assertEquals("y#sMOA'X.,O2mu m36(wES~|@ZX7?CW'CpBK#Mu\"zD`LIf(", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = Subject.StringUtils.trimEnd("", charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("truecandidates", 'k');
      assertEquals("truecandidates", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("", 'P');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("true");
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Subject.StringUtils.trimEnd("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = 'Y';
      String string0 = Subject.StringUtils.trimBegin("YU:F~1^>6@r[wMl n&-}eSx>hEfrSY@Sxq", charArray0);
      assertEquals("U:F~1^>6@r[wMl n&-}eSx>hEfrSY@Sxq", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = Subject.StringUtils.trimBegin("pXix9Jco9~B", charArray0);
      assertEquals("pXix9Jco9~B", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", (char[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("", ':');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("true", 't');
      assertEquals("rue", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("    ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Subject.StringUtils.trimBegin("\"");
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("&lt;");
      assertEquals("lt;", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("Z&<~&]2&i7O-G1j G90?HfL~Z|R8EJ};YYASC&");
      assertEquals("Z<~]2i7O-G1j G90?HfL~Z|R8EJ};YYASC&", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("lT8s}mwZ5(9;@3@&R");
      assertEquals("lT8s}mwZ5(9;@3@R", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Subject.StringUtils.stripMnemonic("<");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("vz^O)$d)'17(-Fwt>&&Y!3v{jU0W ;K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("&yi<1u'(X");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Subject.StringUtils.getMnemonicIndex("\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("}!/TEB%=J(5qyIEEx5=", 2692);
      assertEquals("}!/TEB%=J(5qyIEEx5=", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString((String) null, (-203962851));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Subject.StringUtils.truncateString("N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", (-717));
      assertNotNull(string0);
      assertEquals("%r[!N?}}g...", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // argument must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.isTrue(false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must not be false
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = Subject.StringUtils.splitRemoveEmpties("false-nt 1DaL", "false-nt 1DaL");
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) stringArray0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // argument must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty((Object[]) null, "Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Tp~Q1ns\"Eu!4m(MNGfqphSzqjVil must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Subject.Check.notNullOrEmpty(objectArray0, ",");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notNullOrEmpty("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Subject.Check.notNullOrEmpty("(_>5-IP;\"#JDwzW1WPxdhpVp.IQ*9cm9[A77/", "K*;{!:Lc)PQho[7C-vkV$Cp.=0Mu=p(H(sag#y/?FM20c");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.Check.notEmpty("", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c must not be empty
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Subject.Check.notEmpty("e", "e");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Subject.Check.notEmpty((String) null, "M\"kV(yPm-M[s05pul{&E~r(:o~s|0Bsi%B");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.StringUtils.trimEnd((String) null, '|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // s must not be null
         //
         verifyException("comp5111.assignment.cut.Subject$Check", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(98);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertTrue(boolean0);
      
      String string0 = Subject.BooleanUtils.toString(boolean0, (String) null, (String) null, "ud>_K|(");
      boolean boolean1 = Subject.StringUtils.startsWithIgnoreCase("D1h4@*d|:`;mc5>%pe.w1RGR%f^m9;k", string0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = Subject.BooleanUtils.toString((Boolean) null, "a@K?8~t*B+", "-,[,] or & are not allowed in-conjunction with other delimiters ", "r=V B+1UPsX{(~+@#");
      assertEquals("r=V B+1UPsX{(~+@#", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = Subject.BooleanUtils.toString(boolean0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("nVNU5_2~} y");
      int int0 = Subject.BooleanUtils.toInteger(boolean0, (-717), 121, (-2746));
      assertEquals(121, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger((Boolean) null, 1501, 110, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = new Integer((-2458));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      int int0 = Subject.BooleanUtils.toInteger(boolean0, (-717), 121, (-2746));
      assertEquals((-717), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true, 2669, 109);
      assertEquals(2669, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false, (-1470), 202);
      assertEquals(202, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = Subject.BooleanUtils.toInteger(false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject("r=V B+1UPsX{(~+@#", "sa|Mhl+<i&.L_>", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c", "sa|Mhl+<i&.L_>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((String) null, "Q}<(ti~h4s7c7", "!`<-)XWzH[B7a9xEhw#hI/", "!`<-)XWzH[B7a9xEhw#hI/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, ",d=@dx", (String) null, (String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, "K3I81`>0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null, "UTF-8", "...", (String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("UTF-8");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("off");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("]i");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("&lt;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("Hx!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((String) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(306);
      Integer integer1 = Integer.valueOf(10);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(integer1, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer((-479));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, (Integer) null, (Integer) null, integer0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(3313);
      Integer integer1 = new Integer(299);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(736);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null, (Integer) null, (Integer) null, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(3313);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((Integer) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBooleanObject(1061, 0, (-2835), 2077);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(1, 0, 0, 1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-1), (-1), (-1), 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.toBooleanDefaultIfNull(boolean0, false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("", "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((String) null, "S[G@f4^O[{w28e;2VW{n{", "N%r[!N?}}gw;G!,&P}L(^Rv=j[s7)|c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean("Q+_'&6a-1@hp0g@", "'(?<!\\),", "z4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(",%u}'MY_$]MgHPyyi,R_|kB|y,t", ",%u}'MY_$]MgHPyyi,R_|kB|y,t", "7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("^ew{W&2c#:!/@", "l", "^ew{W&2c#:!/@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("on");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(260);
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean(integer0, integer1, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(3313);
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((Integer) null, (Integer) 0, (Integer) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      boolean boolean0 = Subject.BooleanUtils.toBoolean(integer0, (Integer) null, integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Subject.BooleanUtils.toBoolean((-608), 0, (-893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
         verifyException("comp5111.assignment.cut.Subject$BooleanUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(98, 98, 113);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(4841, 253, 4841);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(202);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer((-1294));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("comp5111.assignment.cut.Subject$Check", "ln", "comp5111.assignment.cut.Subject$Check", "<");
      boolean boolean1 = Subject.BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = Subject.BooleanUtils.toBoolean((Boolean) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.negate((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-717));
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(integer0);
      Boolean boolean1 = Subject.BooleanUtils.negate(boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject((-1));
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "x(EJ4%hk9/&?FNH:hk2\\u6FIb#";
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject(0, 117, 0, 0);
      boolean boolean1 = Subject.BooleanUtils.isNotFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(false, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = Subject.BooleanUtils.compare(true, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = Subject.UrlUtils.arrayToString(stringArray0);
      assertEquals("null,null,null,null,null,null,null,null", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Subject subject0 = new Subject();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Subject.StrUtils subject_StrUtils0 = new Subject.StrUtils();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Subject.StringUtils.replaceOnce("pXix9Jco9~B", "", "~ln");
      assertEquals("pXix9Jco9~B", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("vs%OB{)>\"R:&jPA[9|{9!{im&OLHcX9J&7}oT:]733", 3, true);
      assertEquals("vs%", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Subject.StringUtils.pad("The Integer did not match either specified value", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = Subject.StringUtils.containsIgnoreCase("7PS8t6w}$uG/WO0;hJu]QJuxI~nY0d", "MGxSwDYV}g46$;(+<}zd<tW~Mipup-9D&?et1~D[r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Subject.StringUtils subject_StringUtils0 = new Subject.StringUtils();
      assertEquals(120, Subject.StringUtils.MAX_COMMENT_DISPLAY_LENGTH);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = Subject.StringUtils.escapeXml("h!0ynmv,<[._r}iH.i<\"(4R8Iqy?|FQ,{w8smTV/");
      assertEquals("h!0ynmv,&lt;[._r}iH.i&lt;\"(4R8Iqy?|FQ,{w8smTV/", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        Subject.StringUtils.pad((Number) integer0, (-601), '&');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -601
         //
         verifyException("comp5111.assignment.cut.Subject$StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Subject.StringUtils.formatCommentForOneLine("<");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Subject.BooleanUtils subject_BooleanUtils0 = new Subject.BooleanUtils();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean[] booleanArray0 = Subject.BooleanUtils.primitiveValues();
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Boolean[] booleanArray0 = Subject.BooleanUtils.booleanValues();
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Boolean boolean0 = Subject.BooleanUtils.toBooleanObject("<", "comp5111.assignment.cut.Subject$Check", "8vmu_fy", "<");
      assertNull(boolean0);
      
      boolean boolean1 = Subject.BooleanUtils.isNotTrue(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Subject.Check.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Subject.UrlUtils subject_UrlUtils0 = new Subject.UrlUtils();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Subject.HeapSort subject_HeapSort0 = new Subject.HeapSort();
      Subject.IndexedSortable subject_IndexedSortable0 = mock(Subject.IndexedSortable.class, new ViolatedAssumptionAnswer());
      doReturn((-4365), 55, (-1), 1098, 1098).when(subject_IndexedSortable0).compare(anyInt() , anyInt());
      subject_HeapSort0.sort(subject_IndexedSortable0, (-717), 1098);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Subject.PrimUtils subject_PrimUtils0 = new Subject.PrimUtils();
  }
}
